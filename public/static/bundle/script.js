(()=>{"use strict";const t=(i,s)=>{let o=Math.floor(Math.random()*(s-i+1)+i);return 0===o&&(o=t(i,s)),o},i=t,s=class{ctx;x;y;radius;color;velocityX;velocityY;speed;velocityXMutator;velocityYMutator;constructor({ctx:t,x:i,y:s,radius:o,color:e,speed:h,velocityX:a,velocityY:c,velocityXMutator:r=1,velocityYMutator:l=1}){this.ctx=t,this.x=i,this.y=s,this.radius=o,this.color=e,this.velocityX=a,this.velocityY=c,this.speed=h,this.velocityXMutator=r,this.velocityYMutator=l}draw(){this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.radius,0,2*Math.PI),this.ctx.fillStyle=this.color,this.ctx.shadowColor="rgba(0, 0, 0, 0.3)",this.ctx.shadowBlur=.6,this.ctx.shadowOffsetX=3,this.ctx.shadowOffsetY=3,this.ctx.fill(),this.ctx.closePath()}update(){this.x+=this.velocityX*this.speed*Math.PI/this.velocityXMutator,this.y+=this.velocityY*this.speed*Math.PI/this.velocityYMutator}};var o;!function(t){let i;!function(t){t.PARTICLEINPUT="num_particles",t.VELOCITYINPUT="num_velocity"}(i=t.SIMCONTROLS||(t.SIMCONTROLS={})),t.SIMCONTROLS_NAME="sim_controls"}(o||(o={}));const e=o;var h;!function(t){t.INITIAL_PARTICLE_NUM=i(1,1e3)}(h||(h={}));let a=h.INITIAL_PARTICLE_NUM;new class{form;constructor(t){this.form=document.querySelector(`#${t}`)}getInputValue(t){return this.form.querySelector(`#${t}`).value}setInputValue(t,i){this.form.querySelector(`#${t}`).value=i}}(e.SIMCONTROLS_NAME).setInputValue(e.SIMCONTROLS.PARTICLEINPUT,a.toString());const c=new class{MAX_PARTICLES=1e3;MIN_PARTICLES=1;MAX_ITER=1e6;root;canvas;ctx;boundary;constructor({containerId:t,width:i,height:s}){this.root=document.querySelector(`#${t}`),this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),i&&s&&(this.canvas.width=i,this.canvas.height=s)}initialize(){this.root&&(this.root.style.backgroundColor="white",this.root.style.borderRadius="2%",this.root.style.boxShadow="0 0 10px rgba(0, 0, 0, 0.3)",this.root.style.border="1px solid black",this.root.style.position="relative",this.root.style.width="100%",this.root.style.height="90vh",this.root.appendChild(this.canvas),window.addEventListener("resize",this.resizeCanvas.bind(this)),this.resizeCanvas()),this.boundary=new class{x;y;width;height;constructor(t,i,s,o){this.x=t,this.y=i,this.width=s,this.height=o}isCollidingWith(t){const{x:i,y:s,radius:o}=t;return i+o>this.x+this.width||i-o<this.x||s+o>this.y+this.height||s-o<this.y}resolveCollision(t){const{x:i,y:s,radius:o,velocityX:e,velocityY:h}=t;(i+o>this.x+this.width||i-o<this.x)&&(t.velocityX=-e+.2*Math.random()-.1),(s+o>this.y+this.height||s-o<this.y)&&(t.velocityY=-h+.2*Math.random()-.1)}resolveCollisions(t){for(const i of t)this.isCollidingWith(i)&&this.resolveCollision(i)}}(0,0,this.canvas.width,this.canvas.height)}clearCanvas(){this.ctx?.clearRect(0,0,this.canvas.width,this.canvas.height)}resizeCanvas(){this.root&&this.ctx&&(this.canvas.width=this.root.offsetWidth,this.canvas.height=this.root.offsetHeight)}drawLine(t,i,s,o){this.ctx&&(this.ctx.moveTo(t,i),this.ctx.lineTo(s,o),this.ctx.stroke())}}({containerId:"canvas"});c.initialize();const r=[];let l=0;for(;l<=a&&l<c.MAX_ITER;)r.push(new s({ctx:c.ctx,x:i(0,c.canvas.width),y:i(0,c.canvas.height),radius:10,color:"#"+(1048575*Math.random()*1e6).toString(16).slice(0,6),speed:1,velocityX:i(-2,2),velocityY:i(-2,2)})),l++;const n=()=>{c.clearCanvas();for(const t of r)t.draw(),t.update();c.boundary.resolveCollisions(r),requestAnimationFrame(n)};n()})();